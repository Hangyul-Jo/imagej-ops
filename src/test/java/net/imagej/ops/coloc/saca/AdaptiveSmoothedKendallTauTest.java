/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.coloc.saca;

import net.imagej.ops.coloc.ColocalisationTest;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.histogram.Histogram1d;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgs;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.util.Util;
import net.imglib2.view.IntervalView;
import net.imglib2.view.Views;

import org.junit.Test;

/**
 * Tests {@link AdaptiveSmoothedKendallTau}.
 *
 * @author Curtis Rueden
 * @author Ellen T Arena
 */
public final class AdaptiveSmoothedKendallTauTest extends ColocalisationTest {

	@Test
	public void testExecute() {
		final Img<UnsignedByteType> img = generateUnsignedByteArrayTestImg(true, 22,
			13);
		final IntervalView<UnsignedByteType> img1 = Views.interval(img, new long[] {
			0, 0 }, new long[] { 10, 12 });
		final IntervalView<UnsignedByteType> img2 = Views.zeroMin(Views.interval(
			img, new long[] { 11, 0 }, new long[] { 21, 12 }));
		final Histogram1d<UnsignedByteType> hist1 = ops.image().histogram(img1);
		final Histogram1d<UnsignedByteType> hist2 = ops.image().histogram(img2);
		final UnsignedByteType thres1 = ops.threshold().otsu(hist1);
		final UnsignedByteType thres2 = ops.threshold().otsu(hist2);
		final RandomAccessibleInterval<DoubleType> result = Util
			.getSuitableImgFactory(img1, new DoubleType()).create(img1);
		AdaptiveSmoothedKendallTau.execute(img1, img2, thres1, thres2,
			new DoubleType(), result, 0xdeadbeef);
		final double[] array = { -1.619689767150208, -1.7472329253837062,
			-1.8080478424389705, -1.6083096549693638, -1.4681345430398647,
			-1.2236411280603958, -1.1667094195269883, -0.7537378712246905,
			-0.2023285198777932, -0.08485559560094928, 0.04282118118731926,
			-1.8142453119062065, -1.76470388350007, -1.705970404877485,
			-1.5611122847396761, -1.3561798550320834, -1.0561581859145879,
			-0.8069747465925428, -0.4684537604843948, -0.041641620305765056,
			-0.21960668834203495, -0.043225000671812945, -1.9179766194882597,
			-1.876253152986939, -1.563772897229844, -1.4733109242467983,
			-1.2753082182778397, -0.8719194716625895, -0.020145983432739586,
			0.007246113026211304, 0.6325174879467278, 0.2137045639734537,
			0.21783451816845162, -1.8407540890335796, -1.9085755501760981,
			-1.6878554757145394, -1.257707247704839, -0.9863654946806698,
			-0.2549915017134163, 0.36550643996115384, 0.8525868697773304,
			0.7693665061172761, 0.7048792612302424, 1.5051636388854086,
			-1.9012006755474717, -1.898784789706608, -1.8763999594778928,
			-1.3149610214800562, -0.7316115964004042, -0.4462503616667408,
			0.5013094218755532, 0.6908787897928048, 0.8045289200078645,
			1.4221032617625575, 1.5301402903350743, -1.7574909668567287,
			-1.81271996709873, -1.834371998672391, -0.7272689547180519,
			-0.3746345568603062, 0.07341903783657751, 0.5682626380900384,
			1.0192881299838739, 1.066424447773661, 1.3929952297756427,
			1.411697254653374, -1.6478114326839493, -1.6974240597955639,
			-1.4851178142249484, -0.6548291633331133, -0.20717598067633292,
			0.033852783556621954, 0.7999876786535403, 1.183543410624607,
			1.0476168341574044, 1.233796026928922, 1.1805328681774538,
			-1.4960829698671794, -1.3229585906792594, -0.6279171959043103,
			-0.030853871004135783, 0.18073266007684413, 0.12606120652048036,
			0.4297650499125623, 0.7480975456013625, 1.231644424709188,
			1.343861517425302, 1.3040349581285864, -0.19152295264510322,
			-0.11305012703711131, -0.14974855233642992, 0.296937788667752,
			0.6786356185504812, 0.21715404532060434, 0.3148328018018882,
			0.900919374057452, 1.1510194806708807, 1.3030299874306566,
			1.1106329093376788, 0.28209855468722494, -0.009448051935280612,
			-0.04685921600102172, 0.3724172667228381, 0.33860357946411634,
			0.184110529545169, 0.9283450131455946, 1.0897186713349767,
			0.937638172564038, 1.0607566738788439, 0.9625171668224004,
			0.7463483925210883, 0.34341670353140863, 0.23814917792945867,
			0.5912636078373906, 0.5120378360182856, 0.6748404169247019,
			1.24104258939197, 0.9456295308184335, 0.5923157756860109,
			0.46778592016023735, 0.38850820552708987, 0.9462154510870888,
			0.46254390170919657, 0.32959426286671534, 0.6024736283178552,
			0.3792796231667862, 0.3988544281161017, 0.6304646628218389,
			0.020815615598270616, -0.24949858030354635, -0.004535069978833825,
			0.08990886865524389, 1.1380532452960916, 0.5559626463901919,
			0.3380075494726728, 0.3051553093076241, 0.06932825806090227,
			0.13221694217198826, 0.30570219531663273, -0.17858774702647595,
			-0.316091014912206, -0.34033632281485837, -0.33848178602364315 };
		final Img<DoubleType> expected = ArrayImgs.doubles(array, 11, 13);
		assertIterationsEqual(expected, Views.flatIterable(result));
	}
}
