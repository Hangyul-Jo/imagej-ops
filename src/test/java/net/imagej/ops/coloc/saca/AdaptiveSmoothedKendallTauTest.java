/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2009 - 2015 Board of Regents of the University of
 * Wisconsin-Madison, Broad Institute of MIT and Harvard, and Max Planck
 * Institute of Molecular Cell Biology and Genetics.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.coloc.saca;

import net.imagej.ops.coloc.ColocalisationTest;
import net.imglib2.RandomAccessibleInterval;
import net.imglib2.histogram.Histogram1d;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImgs;
import net.imglib2.type.numeric.integer.UnsignedByteType;
import net.imglib2.type.numeric.real.DoubleType;
import net.imglib2.util.Util;
import net.imglib2.view.IntervalView;
import net.imglib2.view.Views;

import org.junit.Test;

/**
 * Tests {@link AdaptiveSmoothedKendallTau}.
 *
 * @author Curtis Rueden
 * @author Ellen T Arena
 */
public final class AdaptiveSmoothedKendallTauTest extends ColocalisationTest {

	@Test
	public void testExecute() {
		final Img<UnsignedByteType> img = generateUnsignedByteArrayTestImg(true, 22,
			13);
		final IntervalView<UnsignedByteType> img1 = Views.interval(img, new long[] {
			0, 0 }, new long[] { 10, 12 });
		final IntervalView<UnsignedByteType> img2 = Views.zeroMin(Views.interval(
			img, new long[] { 11, 0 }, new long[] { 21, 12 }));
		final Histogram1d<UnsignedByteType> hist1 = ops.image().histogram(img1);
		final Histogram1d<UnsignedByteType> hist2 = ops.image().histogram(img2);
		final UnsignedByteType thres1 = ops.threshold().otsu(hist1);
		final UnsignedByteType thres2 = ops.threshold().otsu(hist2);
		final RandomAccessibleInterval<DoubleType> result = Util
			.getSuitableImgFactory(img1, new DoubleType()).create(img1);
		AdaptiveSmoothedKendallTau.execute(img1, img2, thres1, thres2,
			new DoubleType(), result, 0xdeadbeef);

		// for (DoubleType p : Views.flatIterable(result)) System.out.println(p);

		final double[] array = { -1.6181999650843224, -1.6692541826121903,
			-1.797134104021077, -1.6177968426853286, -1.622864085947528,
			-1.461741740787677, -0.9511750080512051, -0.6935294529281967,
			-0.3910788955119857, -0.18063358000884472, 0.043089096434922876,
			-1.758679176941941, -1.7816414392244284, -1.7572912900659217,
			-1.5300517355132888, -1.5966814203484891, -1.269548145815111,
			-0.7768407537033446, -0.4207407390770802, -0.17841272262733213,
			0.04367163538433323, -0.01235316649379195, -1.8439387662754778,
			-1.8029567166958491, -1.6583429330082478, -1.6089787594313796,
			-1.2665223526845435, -0.694269815999098, -0.10764549948314517,
			0.361886132778233, 0.3318782280103717, 0.22073469238151922,
			0.3923733461887513, -1.8901097518327457, -1.8798269183478102,
			-1.6376645131423393, -1.2059212376194541, -0.9024906025634676,
			-0.3564289685437558, 0.35732723555739243, 0.7215324164649339,
			0.8161961104300935, 0.6931887579645751, 1.2251030546458468,
			-1.8776582971392217, -1.8558343668802957, -1.8376011947939446,
			-1.2738868285526226, -0.683421837753068, -0.1973762028481857,
			-0.008822107627211792, 0.7043326221615681, 0.6900206542275737,
			1.1084319660302904, 1.559269472977232, -1.777185627235522,
			-1.7949256193337866, -1.6839557309867974, -0.8407221110444097,
			-0.6335878133630602, -0.052536891705688975, 0.4220129743083615,
			1.07870690896853, 1.0913861000071208, 1.2052735922339268,
			1.3780815618036926, -1.6578862120118476, -1.6814342615811637,
			-1.5403697645944123, -0.7587816767994532, -0.314929231631378,
			-0.026180618183747256, 0.8560246090287442, 0.9785573992368168,
			1.1961158847570088, 1.2487305369542412, 1.2926169533239602,
			-1.5303695978896914, -1.2016373756931669, -0.6484753925981623,
			-0.11308353014655943, 0.014507591657459133, -0.012595189064938476,
			0.2378189790861866, 0.818239749998994, 1.1479499442893115,
			1.2715835225481933, 1.1795153770980566, -0.20004451981212154,
			-0.1795288407047667, -0.23107889006384524, 0.12422701742380644,
			0.5994303468816401, 0.12225364754335835, 0.10697386697980923,
			0.8894908826224073, 1.0261646820609474, 1.2388353933610659,
			1.1651912899895032, 0.27445692224412843, 0.040383372353850165,
			-0.02117101948072973, 0.4263540784807859, 0.331678860165354,
			0.18015879221036338, 0.864322321877723, 1.0747382435577932,
			1.0197938855075876, 0.992558332845964, 0.9894458024927084,
			0.7229442570155112, 0.31946933123247045, 0.2216753125982005,
			0.5487265809204592, 0.4760630696036352, 0.8949310849341378,
			1.107044902816161, 1.0026184803567644, 0.5222410819918457,
			0.5408801378457266, 0.5053187390618805, 0.9307681229673059,
			0.44480671032400176, 0.3978933689704214, 0.5746450417139425,
			0.3393729464412223, 0.42939271101723486, 0.6032189446613707,
			-0.025599803254239963, -0.2622119094518492, -0.06398626609225956,
			0.11025775800531715, 1.1261785587755226, 0.5410453898422657,
			0.3043775928402, 0.3322385842630161, 0.15760798963562145,
			0.12300133237567107, 0.24144218394437683, -0.12983261614807654,
			-0.4248069879378139, -0.33343126551972546, -0.25760762213287436 };
		final Img<DoubleType> expected = ArrayImgs.doubles(array, 11, 13);
		assertIterationsEqual(expected, Views.flatIterable(result));
	}
}
